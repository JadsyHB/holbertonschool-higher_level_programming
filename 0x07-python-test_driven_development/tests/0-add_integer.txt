Importing method for testing:
     >>> add_integer = __import__('0-add_integer').add_integer

SUCCESSFUL CASES:

Testing b default case:

     >>> print(add_integer(2))
     100

Test ints and floats, signed and unsigned:

     >>> print(add_integer(1, 2))
     3
     >>> print(add_integer(100, -2))
     98
     >>> print(add_integer(100.3, -2))
     98
     >>> print(add_integer(1.6, 2.8))
     3

UNSUCCESSFUL CASES:

Test with no arguments:

     >>> print(add_integer(None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(None, None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer

Test with different types:

     >>> print(add_integer(4, "School"))
     Traceback (most recent call last):
     ...
     TypeError: b must be an integer
     >>> print(add_integer(2, (1, 3)))
     Traceback (most recent call last):
     ...
     TypeError: b must be an integer

Test with extra arguments:

     >>> print(add_integer(1, 2, 3))
     Traceback (most recent call last):
     ...
     TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test with overflow inf:

     >>> print(add_integer(float("inf")
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer
     >>> print(add_integer(float("-inf")
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer

Test with NaN:

     >>> print(add_integer(float("NaN")
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float NaN to integer
